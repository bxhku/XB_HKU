<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL Binlog 调查取证]]></title>
    <url>%2F2019%2F01%2F21%2FMySQL-Binlog-Forensics%2F</url>
    <content type="text"><![CDATA[背景最近，公司有一个客户的MySQL数据库被篡改了数据，因此需要对该客户被攻击的服务器进行调查。其中涉及到对MySQL的Binlog日志分析。在任务完成后，将其中相关的步骤进行总结。Binlog定位 Binlog 位置找到MySQL安装目录中bin目录的位置，同时确认binlog的储存位置。其相应的配置在my.cnf的log_bin=””中。如果能够使用mySQL命令行连接，也可以使用 showvariables like &#39;%log_bin%&#39;命令查看binlog的相关配置。Binlog 结构在binlog所在的数据目录(默认为data目录)，可以看到mysql-bin.index 及 mysql-bin.0000xx 文件。其中.index文件为索引文件，记录数据文件列表。每当数据库重启或者当前一个文件写满后会生成新文件，同时使用命令flush logs也可以重新生成新的binlog日志文件。reset master命令可以用于清空binlog日志文件。Binlog 格式Binlog的格式有三个选项：- Row - Statement - Mixed 简单介绍这三种格式，分别为：- Row: 默认格式，记录导致表的行发生变化的事件 - Statement: 记录被执行的原始SQL查询语句 - Mixed: 默认使用Statement格式，再特定情况下使用Row格式 Binlog格式可以在my.cnf的binlog-format=中进行配置。在MySQL命令行中可以通过SHOW VARIABLES LIKE &#39;binlog_format&#39;;查看。Binlog 内容由于binlog是以二进制格式储存的，所以无法直接查看。MySQL自带的mysqlbinlog工具可以用来查看binlog。[MySQL directory]\bin\mysqlbinlog mysql-bin.000008即可获取binlog中的内容。当然也可以添加参数(–start-porition, –stop-position, –start-time, –stop-time)来筛选日志。在很多事件调查中，其实都可以将目标时间确定在一个范围之内，因此使用参数进行筛选会给我们带来极大的便利。对于Row格式的Binlog，还可以使用-v参数将日志记录转译为”伪-SQL语句”。参考文献https://cloud.tencent.com/developer/article/1032755https://maxchadwick.xyz/blog/working-with-mysql-binary-logs]]></content>
      <categories>
        <category>Forensics</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Forensics</tag>
        <tag>Logs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 配置]]></title>
    <url>%2F2018%2F12%2F19%2FVim-Config%2F</url>
    <content type="text"><![CDATA[~/.vimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354set nocompatible " be iMproved, requiredfiletype off " required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()" alternatively, pass a path where Vundle should install plugins"call vundle#begin('~/some/path/here')" let Vundle manage Vundle, requiredPlugin 'VundleVim/Vundle.vim'" The following are examples of different formats supported." Keep Plugin commands between vundle#begin/end." plugin on GitHub repoPlugin 'tpope/vim-fugitive'Plugin 'altercation/vim-colors-solarized'Plugin 'Valloric/YouCompleteMe'" plugin from http://vim-scripts.org/vim/scripts.html" Plugin 'L9'" Git plugin not hosted on GitHub" git repos on your local machine (i.e. when working on your own plugin)"Plugin 'file:///home/gmarik/path/to/plugin'" The sparkup vim script is in a subdirectory of this repo called vim." Pass the path to set the runtimepath properly.Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;" Install L9 and avoid a Naming conflict if you've already installed a" different version somewhere else." Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;" All of your Plugins must be added before the following linecall vundle#end() " requiredfiletype plugin indent on " required" To ignore plugin indent changes, instead use:"filetype plugin on"" Brief help" :PluginList - lists configured plugins" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this line" ""syntax enablecolorscheme molokaiset fdm=markerset tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttabset nu]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim Configuration]]></title>
    <url>%2F2018%2F12%2F19%2FVim-Config_en%2F</url>
    <content type="text"><![CDATA[~/.vimrc123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354set nocompatible " be iMproved, requiredfiletype off " required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()" alternatively, pass a path where Vundle should install plugins"call vundle#begin('~/some/path/here')" let Vundle manage Vundle, requiredPlugin 'VundleVim/Vundle.vim'" The following are examples of different formats supported." Keep Plugin commands between vundle#begin/end." plugin on GitHub repoPlugin 'tpope/vim-fugitive'Plugin 'altercation/vim-colors-solarized'Plugin 'Valloric/YouCompleteMe'" plugin from http://vim-scripts.org/vim/scripts.html" Plugin 'L9'" Git plugin not hosted on GitHub" git repos on your local machine (i.e. when working on your own plugin)"Plugin 'file:///home/gmarik/path/to/plugin'" The sparkup vim script is in a subdirectory of this repo called vim." Pass the path to set the runtimepath properly.Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;" Install L9 and avoid a Naming conflict if you've already installed a" different version somewhere else." Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;" All of your Plugins must be added before the following linecall vundle#end() " requiredfiletype plugin indent on " required" To ignore plugin indent changes, instead use:"filetype plugin on"" Brief help" :PluginList - lists configured plugins" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this line" ""syntax enablecolorscheme molokaiset fdm=markerset tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttabset nu]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Hexo框架搭建中英文双语网站]]></title>
    <url>%2F2018%2F09%2F13%2FHexo-Bilingual-Blog%2F</url>
    <content type="text"><![CDATA[概述Hexo本身有对于博客国际化的多语言的支持。但是简单倒腾后发现，所谓的国际化只是在显示文章时，根据文章设定的语言将导航栏，侧边栏中的链接名称改为相对应的语言。但博客本身的博文列表中，各个语言的文章仍然混杂在一起。而我理想中的中英文双语站点可以通过一张图片非常形象的表示出来：通过一段时间的搜索，我发现了两种较为可行的方法来实现这个功能。这里我挑选了一个我认为更加合理的方法来实现。（另一种方法通过两套Hexo+NexT来实现。即构建中英文两个相互独立的Hexo站点。这样做的好处在于结构清晰，两种语言不存在互相干扰的可能。但缺点则是这样子相当于维护两套Hexo站点，每次生成都需要执行两次，致使操作相对繁杂。具体的实现方法详见：https://chenyxmr.github.io/2016/08/04/hexo-bilingual/）好了，切入正题，接下来我将详细介绍基于hexo-generator-i18n插件的方法。实现方法插件安装首先，安装hexo-generator-i18n插件。相信这条命令大家已经非常熟悉了。1npm install hexo-generator-i18n --save插件成功安装完成后，在Hexo的根目录中找到package.json文件，这个文件记录了已经安装的各个Hexo插件名称及版本号。在这个文件中将hexo-generator-i18n所在的这一行移动到hexo-generator-的最后一行。12345678910111213141516"dependencies": &#123; "canvas-nest.js": "^2.0.3", "gitment": "0.0.3", "hexo": "^3.7.0", "hexo-asset-image": "0.0.3", "hexo-deployer-git": "^0.3.1", "hexo-generator-archive": "^0.1.5", "hexo-generator-category": "^0.1.3", "hexo-generator-index": "^0.2.1", "hexo-generator-searchdb": "^1.0.8", "hexo-generator-tag": "^0.2.0", "hexo-generator-i18n": "0.0.7", "hexo-neat": "^1.0.4", "hexo-renderer-ejs": "^0.3.1", "hexo-renderer-marked": "^0.3.2", "hexo-renderer-stylus": "^0.3.3",（根据观察，每次重新安装完插件的时候该文件会自动根据首字母重新排序,要记得修改顺序。）修改配置首先修改Hexo根目录中的配置文件_config.yml的语言选项：1234567#language: #- zh-CN#- enlanguage: [zh-CN,en]i18n: type: [page, post] generator: [index, archive, category, tag]完成后保存并退出。尝试运行命令 hexo clean &amp;&amp; hexo g 重新生成public文件夹。此时，public目录下应该会包含了一个新的目录/en。 这个目录就是英文站相关文件所在的路径。每次执行hexo g命令时，所有的博文会在这两个文件目录中各生成一份。此时，如果我们访问网站时，已经可以通过访问 www.yourwebsite.com/en 来进入英文站点。但是，显而易见，在当前条件下，无论文章是以何种语言呈现，所有的文章都会在中英文网站中各出现一次。这显然也不是我们所希望得到的效果。因此，我们还需要找一个方法，让Hexo在生成页面时，根据文章的语言将其呈现在对应的页面中。添加生成条件首先，在博文(post)的标题处加上lang:标识。简体中文博客标记为lang: zh-CN，英文版则是lang: en。在 themes/next/layout/index.swig文件中，为1&#123;&#123; post_template.render(post, true) &#125;&#125;添加判断条件。 (题外话：此处使用行内代码写包含{ % % }这样的语句，会使渲染器尝试解析该断代码，并导致Template render error:这样的错误。我找到的相关解决方法)具体代码如下(记得删除注释)：12345678&#123;% block content %&#125; &lt;section id="posts" class="posts-expand"&gt; &#123;% for post in page.posts %&#125; &#123;% if page.lang === post.lang %&#125; // Edited &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endif %&#125; // Edited &#123;% endfor %&#125; &lt;/section&gt;再加入该语句之后，只有当页面的语言与文章的语言完全一致时，这篇文章才会被生成。此时再打开首页观察一下，所有的文章都已经根据语言分类到对应的页面中了。同理，如果站点启用了其他导航页面，你希望在这些页面中，显示的文章同样也根据当前页面的语言来显示的话。那就对其相对应的生成页面做相同的改动就可以了。如，我希望更改归档页面，那就找到themes/next/layout/archive.swig, 并为1&#123;&#123; post_template.render(post, true) &#125;&#125;添加判断条件。但是，这也还没有结束。虽然我们已经有两个基本符合我们想象的中英文页面，但他们却还互不相通。因此，我们还需要在导航栏中创建一个链接来实现中英文页面之间的跳转。在目录栏中添加切换语言项首先，找到/themes/next/_config.yml文件，在Menu:下添加switch_lang:关键词：12345678910menu: home: / || home #about: /about/ || user #tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat switch_lang: /en || language其中，||之后的值为该链接所使用的FontAwesome Icon的标签名，有需要的话可以自行修改。不过话说回来，我觉得主题默认的图标都还是不错的，没什么必要修改。如果||之后没有填写，则会显示问号图标。然后，再为NexT的语言支持文件添加对应的翻译。这里的例子中需要修改的是/themes/next/languages/下的zh-CN.yml和en.yml文件。在两个文件中分别添加switch_lang:：1234567891011menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益 404 switch_lang: --&gt;English1234567891011menu: home: Home archives: Archives categories: Categories tags: Tags about: About search: Search schedule: Schedule sitemap: Sitemap commonweal: Commonweal 404 switch_lang: --&gt;简体中文细心的话可能已经会发现，之前在Next主题的_config.yml文件中添加的switch_lang:项所对应的链接为/en。这就意味着，如果我们正在浏览英文页面，虽然目录栏中会显示--&gt;简体中文的语言切换栏，但是点击的话则依旧会跳转到/en页面。也就是说，目前这个跳转链接还只是单向可用的！所以我们还需要一步额外的操作，使英文页面在生成时将这个链接更改为指向我们的主页面（中文首页）。在themes/next/layout/_custom/head.swig中添加下列js代码，使其在加载完英文页面后，将switch_lang所对应的链接地址替换。123456789101112131415&lt;script type="text/javascript"&gt; // Wait for the page to load first var _prevOnload = window.onload; window.onload = function() &#123; var switchLang = document.getElementById("menu").getElementsByClassName("menu-item-switch_lang")[0].childNodes[0]; var href = window.location.href; var indexOfEn = href.toLowerCase().indexOf('/en/'); if(indexOfEn !== -1) &#123; switchLang.href = href.replace('/en/', '/'); &#125; else &#123; switchLang.href = href.replace(/(^http[s]?:\/\/[a-z0-9.]*[:?0-9]*\/)(.*)/i, '$1en/$2'); &#125; &#125;&lt;/script&gt;这段代码还有改进的空间。如果有合适的意见请在评论中指出。好了！终于来到最后一步了：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d重新生成并部署。现在应该就能看到一个相对比较理想的中英文双语博客了。存在的问题当然，通过这种方法实现的Hexo双语网站也还远远没有完善。还有非常多待改进的地方：文章页面跳转暂时全部跳转到首页分类中全部显示在分类生成时加入相应的判断语句所有文章都会被分别加入两个文件夹，导致数量不对直接调用Hexo中的函数，不好改。有兴趣的话可以重写。参考资料https://wm4n.github.io/Hexo-NexT-%E5%90%8C%E6%99%82%E6%94%AF%E6%8F%B4%E5%A4%9A%E8%AA%9E%E7%B3%BB/]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Insert Images to an Hexo Post]]></title>
    <url>%2F2018%2F09%2F02%2FInsert-Images-to-an-Hexo-Post%2F</url>
    <content type="text"><![CDATA[First, execute the following command to install hexo-asset-image plugin.1npm install hexo-asset-image --saveNext, please head to _config.yml to enable post_asset_folder.1post_asset_folder: trueFrom now on, for each time hexo new [layout] &lt;title&gt; is executed, hexo will simoutanuously create a folder having the same name as your new post’s title. If you want to insert images to your post, just]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[YouCompleteMe 安装教程]]></title>
    <url>%2F2018%2F09%2F02%2FYouCompleteMe-Installation%2F</url>
    <content type="text"><![CDATA[YouCompleteMe作为Vim中最好用（没有之一）的代码自动补全插件，却同时又是最不容易安装的插件之一。其实在YCM的Github官网，有非常详细完整的安装说明。如果在Mac OS X, Windows, Ubuntu, FreeBSD/OpenBSD或Fedora上安装YCM，且英语还Okay的话，建议直接移步官方安装说明文档。但官方说明文档却没有对在CentOS与Debian中安装YCM的详细说明。所以在这里总结一下具体的步骤给大家作一个参考。在CentOS中安装YCM使用 Vundle 安装YCMVundle（Vim Bundle的缩写）是一个针对Vim的插件管理器。相较于Vim本身混乱的插件结构，使用Vundle来管理插件就显得非常得方便、简洁。用户只需要在Github上找到自己想要的插件的名字，并将其添加到.vimrc文件中，之后的安装，更新和卸载等操作都可以由vundle来完成了。下载Vundle1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim编辑 .vimrc 文件将以下代码添加至你的.vimrc文件中。同时，你也可以根据需求来添加其他你想要安装的vim插件。12345678910111213141516171819202122232425262728293031323334353637383940414243set nocompatible " be iMproved, requiredfiletype off " required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()" alternatively, pass a path where Vundle should install plugins"call vundle#begin('~/some/path/here')" let Vundle manage Vundle, requiredPlugin 'VundleVim/Vundle.vim'" The following are examples of different formats supported." Keep Plugin commands between vundle#begin/end." plugin on GitHub repoPlugin 'Valloric/YouCompleteMe'" plugin from http://vim-scripts.org/vim/scripts.html" Plugin 'L9'" Git plugin not hosted on GitHub"Plugin 'git://git.wincent.com/command-t.git'" git repos on your local machine (i.e. when working on your own plugin)"Plugin 'file:///home/gmarik/path/to/plugin'" The sparkup vim script is in a subdirectory of this repo called vim." Pass the path to set the runtimepath properly."Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;" Install L9 and avoid a Naming conflict if you've already installed a" different version somewhere else." Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;" All of your Plugins must be added before the following linecall vundle#end() " requiredfiletype plugin indent on " required" To ignore plugin indent changes, instead use:"filetype plugin on"" Brief help" :PluginList - lists configured plugins" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this line安装插件打开Vim并运行:PluginInstall指令。这一步骤可能所需要的时间较长，需要耐心地等待它安装完成。安装编译YCM所需要的软件安装开发工具与CMake:1yum install build-essential cmake 并确保python头文件包已经正确安装:1yum install python-devel rh-python36-python-devel.x86_64 如果你的CentOS上还未安装Python3，那么运行以下命令完成Python3.6的安装:12sudo yum install centos-release-sclsudo yum install rh-python36需要的话，可以将Python3.6作为默认的Python来运行： 1scl enable rh-python36 bash 编译YCM完成包含对C语言家族语义支持的YCM编译12cd ~/.vim/bundle/YouCompleteMe./install.py --clang-completer不包含语义支持则直接运行install.py12cd ~/.vim/bundle/YouCompleteMe./install.py如果需要简单的开启对所有语言的支持，则可以用–all标识。12cd ~/.vim/bundle/YouCompleteMe./install.py --all参考文献https://github.com/Valloric/YouCompleteMe#full-installation-guide]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[YouCompleteMe Installation]]></title>
    <url>%2F2018%2F09%2F02%2FYouCompleteMe-Installation_en%2F</url>
    <content type="text"><![CDATA[Acutally, there’re pretty detailed instructions for installation on YCM(YouCompleteMe)’s github page. However, the installation steps on CentOS and Debian cannot be found.Complete YCM Installation on CentOSInstall YCM with VundleVundle is a Plugin Manager for Vim. It provides an easy way to install, update and configure Vim Plugins.Download Vundle1git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vimEdit .vimrcPut the following scripts in your .vimrc. You can also add other Plugins.12345678910111213141516171819202122232425262728293031323334353637383940414243 set nocompatible " be iMproved, requiredfiletype off " required" set the runtime path to include Vundle and initializeset rtp+=~/.vim/bundle/Vundle.vimcall vundle#begin()" alternatively, pass a path where Vundle should install plugins"call vundle#begin('~/some/path/here')" let Vundle manage Vundle, requiredPlugin 'VundleVim/Vundle.vim'" The following are examples of different formats supported." Keep Plugin commands between vundle#begin/end." plugin on GitHub repoPlugin 'Valloric/YouCompleteMe'" plugin from http://vim-scripts.org/vim/scripts.html" Plugin 'L9'" Git plugin not hosted on GitHub"Plugin 'git://git.wincent.com/command-t.git'" git repos on your local machine (i.e. when working on your own plugin)"Plugin 'file:///home/gmarik/path/to/plugin'" The sparkup vim script is in a subdirectory of this repo called vim." Pass the path to set the runtimepath properly."Plugin 'rstacruz/sparkup', &#123;'rtp': 'vim/'&#125;" Install L9 and avoid a Naming conflict if you've already installed a" different version somewhere else." Plugin 'ascenator/L9', &#123;'name': 'newL9'&#125;" All of your Plugins must be added before the following linecall vundle#end() " requiredfiletype plugin indent on " required" To ignore plugin indent changes, instead use:"filetype plugin on"" Brief help" :PluginList - lists configured plugins" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate" :PluginSearch foo - searches for foo; append `!` to refresh local cache" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal"" see :h vundle for more details or wiki for FAQ" Put your non-Plugin stuff after this linePlugin InstallLaunch vim and run :PluginInstallPlease be patient. It could take a while to complete the installation.Install Dependencies for CompilingInstall development tools and CMake:1yum install build-essential cmakeMake sure you have Python headers installed:1yum install python-devel rh-python36-python-devel.x86_64 In case python3 is not installed on your CentOS:Enable Software Collections:1sudo yum install centos-release-sclInstall Python3: 1sudo yum install rh-python36 If you want to use python 3.6 as default 1scl enable rh-python36 bash Compile YCMCompiling YCM with semantic support for C-family languages:12cd ~/.vim/bundle/YouCompleteMe./install.py --clang-completerCompiling YCM without semantic support for C-family languages:12cd ~/.vim/bundle/YouCompleteMe./install.pyTo simply compile with everything enabled, there’s a –all flag.12cd ~/.vim/bundle/YouCompleteMe./install.py --allReferrencehttps://github.com/Valloric/YouCompleteMe#full-installation-guide]]></content>
      <categories>
        <category>Configuration</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>CentOS</tag>
        <tag>YCM</tag>
      </tags>
  </entry>
</search>
